// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:Roshsu@786@db.vqqungsjvockabaimxvq.supabase.co:5432/postgres?sslmode=require"
}


// model User {
//   id             String  @id @default(uuid()) @db.Uuid
//   name           String?
//   email          String? @unique
//   username       String? @unique
//   password       String?
//   image          String?
//   emailVerified  DateTime? @default(now())
//   accounts       Account[]
//   sessions       Session[]
//   memories       Memory[] @relation("UserMemories")
// }

// model Memory {
//   id        String   @id @default(uuid()) @db.Uuid
//   userId    String   @db.Uuid
//   user      User     @relation(fields: [userId], references: [id], name: "UserMemories")
//   text      String?
//   imageUrl  String?
//   audioUrl  String?
//   createdAt DateTime @default(now())
// }

// model Account {
//   id                 String @id @default(cuid())
//   userId             String
//   type               String
//   provider           String
//   providerAccountId  String
//   user               User   @relation(fields: [userId], references: [id])
// }

// model Session {
//   id        String   @id @default(cuid())
//   userId    String
//   expires   DateTime
//   user      User     @relation(fields: [userId], references: [id])
// }



model User {
  id             String  @id @default(uuid()) @db.Uuid
  name           String?
  email          String? @unique
  username       String? @unique
  password       String?
  image          String?
  emailVerified  DateTime? @default(now())
  phoneNumber     String?  @unique
  isPhoneVerified Boolean  @default(false)
  verificationCode String? // Stores OTP temporarily
  accounts       Account[]
  sessions       Session[]
  memories       Memory[] @relation("UserMemories")
}

model Memory {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], name: "UserMemories")
  text      String?
  imageUrl  String?
  audioUrl  String?
  createdAt DateTime @default(now())
}

model Account {
  id                 String @id @default(cuid())
  userId             String @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  user               User   @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @db.Uuid
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id])
}